//
// Generated file, do not edit! Created by opp_msgtool 6.0 from Message.msg.
//

#ifndef __MESSAGE_M_H
#define __MESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class PutRequest;
class UpdatePacket;
class AbortMessage;
class AbortMessageToClient;
class CommitMessageToClient;
class UpdateRequest;
class UpdateResponse;
class GetRequest;
class ValueRequest;
class ValueResponse;
class GetResponse;
// cplusplus {{
#include <vector>
typedef std::vector<int> Vector;
// }}

// cplusplus {{
#include <utility>
typedef std::pair<int,std::pair<int,int>> DataItem;
// }}

/**
 * Class generated from <tt>Message.msg:31</tt> by opp_msgtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * message PutRequest
 * {
 *     Vector writeQuorum;
 *     int key;
 *     int value;
 *     int putIdClientSide;
 * }
 * </pre>
 */
class PutRequest : public ::omnetpp::cMessage
{
  protected:
    Vector writeQuorum;
    int key = 0;
    int value = 0;
    int putIdClientSide = 0;

  private:
    void copy(const PutRequest& other);

  protected:
    bool operator==(const PutRequest&) = delete;

  public:
    PutRequest(const char *name=nullptr, short kind=0);
    PutRequest(const PutRequest& other);
    virtual ~PutRequest();
    PutRequest& operator=(const PutRequest& other);
    virtual PutRequest *dup() const override {return new PutRequest(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const Vector& getWriteQuorum() const;
    virtual Vector& getWriteQuorumForUpdate() { return const_cast<Vector&>(const_cast<PutRequest*>(this)->getWriteQuorum());}
    virtual void setWriteQuorum(const Vector& writeQuorum);

    virtual int getKey() const;
    virtual void setKey(int key);

    virtual int getValue() const;
    virtual void setValue(int value);

    virtual int getPutIdClientSide() const;
    virtual void setPutIdClientSide(int putIdClientSide);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PutRequest& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PutRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Message.msg:38</tt> by opp_msgtool.
 * <pre>
 * message UpdatePacket
 * {
 *     DataItem keyValueItem;
 * }
 * </pre>
 */
class UpdatePacket : public ::omnetpp::cMessage
{
  protected:
    DataItem keyValueItem;

  private:
    void copy(const UpdatePacket& other);

  protected:
    bool operator==(const UpdatePacket&) = delete;

  public:
    UpdatePacket(const char *name=nullptr, short kind=0);
    UpdatePacket(const UpdatePacket& other);
    virtual ~UpdatePacket();
    UpdatePacket& operator=(const UpdatePacket& other);
    virtual UpdatePacket *dup() const override {return new UpdatePacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const DataItem& getKeyValueItem() const;
    virtual DataItem& getKeyValueItemForUpdate() { return const_cast<DataItem&>(const_cast<UpdatePacket*>(this)->getKeyValueItem());}
    virtual void setKeyValueItem(const DataItem& keyValueItem);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const UpdatePacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, UpdatePacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Message.msg:42</tt> by opp_msgtool.
 * <pre>
 * message AbortMessage
 * {
 *     int key;
 *     int putIdClientSide;
 *     int clientId;
 * }
 * </pre>
 */
class AbortMessage : public ::omnetpp::cMessage
{
  protected:
    int key = 0;
    int putIdClientSide = 0;
    int clientId = 0;

  private:
    void copy(const AbortMessage& other);

  protected:
    bool operator==(const AbortMessage&) = delete;

  public:
    AbortMessage(const char *name=nullptr, short kind=0);
    AbortMessage(const AbortMessage& other);
    virtual ~AbortMessage();
    AbortMessage& operator=(const AbortMessage& other);
    virtual AbortMessage *dup() const override {return new AbortMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getKey() const;
    virtual void setKey(int key);

    virtual int getPutIdClientSide() const;
    virtual void setPutIdClientSide(int putIdClientSide);

    virtual int getClientId() const;
    virtual void setClientId(int clientId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AbortMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AbortMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Message.msg:48</tt> by opp_msgtool.
 * <pre>
 * message AbortMessageToClient
 * {
 *     int key;
 *     int putIdClientSide;
 * }
 * </pre>
 */
class AbortMessageToClient : public ::omnetpp::cMessage
{
  protected:
    int key = 0;
    int putIdClientSide = 0;

  private:
    void copy(const AbortMessageToClient& other);

  protected:
    bool operator==(const AbortMessageToClient&) = delete;

  public:
    AbortMessageToClient(const char *name=nullptr, short kind=0);
    AbortMessageToClient(const AbortMessageToClient& other);
    virtual ~AbortMessageToClient();
    AbortMessageToClient& operator=(const AbortMessageToClient& other);
    virtual AbortMessageToClient *dup() const override {return new AbortMessageToClient(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getKey() const;
    virtual void setKey(int key);

    virtual int getPutIdClientSide() const;
    virtual void setPutIdClientSide(int putIdClientSide);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AbortMessageToClient& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AbortMessageToClient& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Message.msg:53</tt> by opp_msgtool.
 * <pre>
 * message CommitMessageToClient
 * {
 *     int key;
 *     int putIdClientSide;
 * }
 * </pre>
 */
class CommitMessageToClient : public ::omnetpp::cMessage
{
  protected:
    int key = 0;
    int putIdClientSide = 0;

  private:
    void copy(const CommitMessageToClient& other);

  protected:
    bool operator==(const CommitMessageToClient&) = delete;

  public:
    CommitMessageToClient(const char *name=nullptr, short kind=0);
    CommitMessageToClient(const CommitMessageToClient& other);
    virtual ~CommitMessageToClient();
    CommitMessageToClient& operator=(const CommitMessageToClient& other);
    virtual CommitMessageToClient *dup() const override {return new CommitMessageToClient(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getKey() const;
    virtual void setKey(int key);

    virtual int getPutIdClientSide() const;
    virtual void setPutIdClientSide(int putIdClientSide);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CommitMessageToClient& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CommitMessageToClient& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Message.msg:58</tt> by opp_msgtool.
 * <pre>
 * message UpdateRequest
 * {
 *     int key;
 *     int putIdClientSide;
 *     int clientId;
 * }
 * </pre>
 */
class UpdateRequest : public ::omnetpp::cMessage
{
  protected:
    int key = 0;
    int putIdClientSide = 0;
    int clientId = 0;

  private:
    void copy(const UpdateRequest& other);

  protected:
    bool operator==(const UpdateRequest&) = delete;

  public:
    UpdateRequest(const char *name=nullptr, short kind=0);
    UpdateRequest(const UpdateRequest& other);
    virtual ~UpdateRequest();
    UpdateRequest& operator=(const UpdateRequest& other);
    virtual UpdateRequest *dup() const override {return new UpdateRequest(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getKey() const;
    virtual void setKey(int key);

    virtual int getPutIdClientSide() const;
    virtual void setPutIdClientSide(int putIdClientSide);

    virtual int getClientId() const;
    virtual void setClientId(int clientId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const UpdateRequest& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, UpdateRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Message.msg:64</tt> by opp_msgtool.
 * <pre>
 * message UpdateResponse
 * {
 *     int key;
 *     int version;
 *     bool abortRequest = false;
 * }
 * </pre>
 */
class UpdateResponse : public ::omnetpp::cMessage
{
  protected:
    int key = 0;
    int version = 0;
    bool abortRequest = false;

  private:
    void copy(const UpdateResponse& other);

  protected:
    bool operator==(const UpdateResponse&) = delete;

  public:
    UpdateResponse(const char *name=nullptr, short kind=0);
    UpdateResponse(const UpdateResponse& other);
    virtual ~UpdateResponse();
    UpdateResponse& operator=(const UpdateResponse& other);
    virtual UpdateResponse *dup() const override {return new UpdateResponse(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getKey() const;
    virtual void setKey(int key);

    virtual int getVersion() const;
    virtual void setVersion(int version);

    virtual bool getAbortRequest() const;
    virtual void setAbortRequest(bool abortRequest);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const UpdateResponse& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, UpdateResponse& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Message.msg:70</tt> by opp_msgtool.
 * <pre>
 * message GetRequest
 * {
 *     Vector readQuorum;
 *     int key;
 *     int readIdClientSide;
 * }
 * </pre>
 */
class GetRequest : public ::omnetpp::cMessage
{
  protected:
    Vector readQuorum;
    int key = 0;
    int readIdClientSide = 0;

  private:
    void copy(const GetRequest& other);

  protected:
    bool operator==(const GetRequest&) = delete;

  public:
    GetRequest(const char *name=nullptr, short kind=0);
    GetRequest(const GetRequest& other);
    virtual ~GetRequest();
    GetRequest& operator=(const GetRequest& other);
    virtual GetRequest *dup() const override {return new GetRequest(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const Vector& getReadQuorum() const;
    virtual Vector& getReadQuorumForUpdate() { return const_cast<Vector&>(const_cast<GetRequest*>(this)->getReadQuorum());}
    virtual void setReadQuorum(const Vector& readQuorum);

    virtual int getKey() const;
    virtual void setKey(int key);

    virtual int getReadIdClientSide() const;
    virtual void setReadIdClientSide(int readIdClientSide);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const GetRequest& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, GetRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Message.msg:76</tt> by opp_msgtool.
 * <pre>
 * message ValueRequest
 * {
 *     int key;
 *     int readId;
 * }
 * </pre>
 */
class ValueRequest : public ::omnetpp::cMessage
{
  protected:
    int key = 0;
    int readId = 0;

  private:
    void copy(const ValueRequest& other);

  protected:
    bool operator==(const ValueRequest&) = delete;

  public:
    ValueRequest(const char *name=nullptr, short kind=0);
    ValueRequest(const ValueRequest& other);
    virtual ~ValueRequest();
    ValueRequest& operator=(const ValueRequest& other);
    virtual ValueRequest *dup() const override {return new ValueRequest(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getKey() const;
    virtual void setKey(int key);

    virtual int getReadId() const;
    virtual void setReadId(int readId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ValueRequest& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ValueRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Message.msg:81</tt> by opp_msgtool.
 * <pre>
 * message ValueResponse
 * {
 *     DataItem keyValueItem;
 *     int readId;
 * }
 * </pre>
 */
class ValueResponse : public ::omnetpp::cMessage
{
  protected:
    DataItem keyValueItem;
    int readId = 0;

  private:
    void copy(const ValueResponse& other);

  protected:
    bool operator==(const ValueResponse&) = delete;

  public:
    ValueResponse(const char *name=nullptr, short kind=0);
    ValueResponse(const ValueResponse& other);
    virtual ~ValueResponse();
    ValueResponse& operator=(const ValueResponse& other);
    virtual ValueResponse *dup() const override {return new ValueResponse(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const DataItem& getKeyValueItem() const;
    virtual DataItem& getKeyValueItemForUpdate() { return const_cast<DataItem&>(const_cast<ValueResponse*>(this)->getKeyValueItem());}
    virtual void setKeyValueItem(const DataItem& keyValueItem);

    virtual int getReadId() const;
    virtual void setReadId(int readId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ValueResponse& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ValueResponse& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Message.msg:86</tt> by opp_msgtool.
 * <pre>
 * message GetResponse
 * {
 *     DataItem keyValueItem;
 *     int readIdClientSide;
 * }
 * </pre>
 */
class GetResponse : public ::omnetpp::cMessage
{
  protected:
    DataItem keyValueItem;
    int readIdClientSide = 0;

  private:
    void copy(const GetResponse& other);

  protected:
    bool operator==(const GetResponse&) = delete;

  public:
    GetResponse(const char *name=nullptr, short kind=0);
    GetResponse(const GetResponse& other);
    virtual ~GetResponse();
    GetResponse& operator=(const GetResponse& other);
    virtual GetResponse *dup() const override {return new GetResponse(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const DataItem& getKeyValueItem() const;
    virtual DataItem& getKeyValueItemForUpdate() { return const_cast<DataItem&>(const_cast<GetResponse*>(this)->getKeyValueItem());}
    virtual void setKeyValueItem(const DataItem& keyValueItem);

    virtual int getReadIdClientSide() const;
    virtual void setReadIdClientSide(int readIdClientSide);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const GetResponse& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, GetResponse& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

inline any_ptr toAnyPtr(const Vector *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline Vector *fromAnyPtr(any_ptr ptr) { return ptr.get<Vector>(); }
inline any_ptr toAnyPtr(const DataItem *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline DataItem *fromAnyPtr(any_ptr ptr) { return ptr.get<DataItem>(); }
template<> inline PutRequest *fromAnyPtr(any_ptr ptr) { return check_and_cast<PutRequest*>(ptr.get<cObject>()); }
template<> inline UpdatePacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<UpdatePacket*>(ptr.get<cObject>()); }
template<> inline AbortMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<AbortMessage*>(ptr.get<cObject>()); }
template<> inline AbortMessageToClient *fromAnyPtr(any_ptr ptr) { return check_and_cast<AbortMessageToClient*>(ptr.get<cObject>()); }
template<> inline CommitMessageToClient *fromAnyPtr(any_ptr ptr) { return check_and_cast<CommitMessageToClient*>(ptr.get<cObject>()); }
template<> inline UpdateRequest *fromAnyPtr(any_ptr ptr) { return check_and_cast<UpdateRequest*>(ptr.get<cObject>()); }
template<> inline UpdateResponse *fromAnyPtr(any_ptr ptr) { return check_and_cast<UpdateResponse*>(ptr.get<cObject>()); }
template<> inline GetRequest *fromAnyPtr(any_ptr ptr) { return check_and_cast<GetRequest*>(ptr.get<cObject>()); }
template<> inline ValueRequest *fromAnyPtr(any_ptr ptr) { return check_and_cast<ValueRequest*>(ptr.get<cObject>()); }
template<> inline ValueResponse *fromAnyPtr(any_ptr ptr) { return check_and_cast<ValueResponse*>(ptr.get<cObject>()); }
template<> inline GetResponse *fromAnyPtr(any_ptr ptr) { return check_and_cast<GetResponse*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __MESSAGE_M_H

